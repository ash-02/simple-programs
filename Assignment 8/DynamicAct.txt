DynamicOptimalActivitySelection(start, finish, n):
        let c[0..n+1][0..n+1] be a 2D array
        let optimal_activities[0..n+1][0..n+1] be a 2D array

        for i = 0 to n:
                c[i][i] = 0
                c[i][i+1] = 0
        c[n + 1, n + 1] = 0

        for length = 2 to n+1:
                for i = 0 to n-length+1:
                        j = i + length
                        c[i][j] = 0
                        k = j - 1
                        while finish[i] < finish[k]
                                if finish[i] ≤ start[k] and finish[k] ≤ start[j] and c[i, k] + c[k, j] + 1 > c[i, j]:
                                    c[i, j] = c[i, k] + c[k, j] + 1
                                    optimal_activities[i, j] = k
                                k = k - 1
        
        print("The maximum number of activities is: ", c[0][n+1])

        PrintOptimalActivities(c, optimal_activities, 0, n + 1)

PrintOptimalActivities(c, act, i, j)
        Let Q be an empty queue
        Q.enqueue((i, j))

        while Q is not empty:
                (i, j) = Q.dequeue()
                if c[i][j] > 0:
                        k = optimal_activities[i][j]
                        print(k)
                        Q.enqueue((i, k))
                        Q.enqueue((k, j))