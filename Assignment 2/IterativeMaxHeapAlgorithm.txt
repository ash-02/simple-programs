def maxHeapify(A, i):

    largest = i
    subtreeSorted = False

    while(subtreeSorted is False):

        l = heapUtilities.left(i)
        r = heapUtilities.right(i)

        if l <= A.heapSize and A[l] > A[i]:
            largest = l
        else:
            largest = i

        if r <= A.heapSize and A[r] > A[largest]:
            largest = r
        
        if largest != i:
			exchange A[i] with A[largest]
            i = largest
        else:
            subtreeSorted = True

def buildMaxHeap(A):
	A.heapSize = len(A)
    for i = n // 2 downto 0:
        maxHeapify(A, i)